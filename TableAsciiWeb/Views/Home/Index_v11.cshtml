@{
    ViewBag.Title = "Home Page";
}
@section Scripts
{
    <style>
        .viewer {
            font-family: Courier New, Courier, monospace;
            font-style: normal;
            line-height: normal;
        }
        .pre-view {
            width: 100%;
            font-family: Courier New, Courier, monospace;
            font-style: normal;
            line-height: normal;
        }
    </style>
}

<div class="container" id="miApp">
    <div class="row">
        <div class="col-3">
            <form class="row g-3">
                <div class="col-12">
                    <label for="demos" class="form-label">Demos</label>
                    <select class="form-select" id="demos" v-model="demoselected">
                        <option v-for="(d,index) in demos" v-bind:value="index" v-bind:selected="index=='0'">{{d.name}}</option>
                    </select>
                </div>
                <div class="col-12">
                    <label for="formatos" class="form-label">Formatos</label>
                    <select class="form-select" id="formatos" v-model="formatoselected">
                        <option v-for="(f,index) in formatos" v-bind:value="index" v-bind:selected="index=='0'">{{index}}</option>
                    </select>
                </div>
                <div class="col-12">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" v-model="ispadding" id="ispadding">
                        <label class="form-check-label" for="ispadding">Padding</label>
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" v-model="isheader" id="isheader">
                        <label class="form-check-label" for="isheader">Header</label>
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" v-model="iscondensed" id="iscondensed">
                        <label class="form-check-label" for="iscondensed">Condensed</label>
                    </div>
                </div>
                <div class="col-12">
                    <h5>Merges</h5>
                </div>
                <div class="col-12">
                    <div class="row">
                        <div class="col-6">
                            <label for="col" class="form-label">Col 1</label>
                            <input type="number" class="form-control" v-model="merges.col" id="col" />
                        </div>
                        <div class="col-6">
                            <label for="row" class="form-label">Row 1</label>
                            <input type="number" class="form-control" v-model="merges.row" id="row" />
                        </div>
                    </div>
                </div>
                <div class="col-12">
                    <div class="row">
                        <div class="col-6">
                            <label for="colspan" class="form-label">Col 2</label>
                            <input type="number" class="form-control" v-model="merges.colfin" id="colspan" />
                        </div>
                        <div class="col-6">
                            <label for="rowspan" class="form-label">Row 2</label>
                            <input type="number" class="form-control" v-model="merges.rowfin" id="rowspan" />
                        </div>
                    </div>
                </div>
                <div class="col-12">
                   <button class="btn btn-primary">Aplicar merge</button>
                </div>
            </form>
        </div>
        <div class="col-9">
            <textarea class="viewer" cols="100" rows="15">{{tableList}}</textarea>
        </div>
    </div>
</div>

<script>
    var miApp = new Vue({
        el: '#miApp',
        data: {
            formatos: new Array(
                //0i  1f   2f   3i   4i   5i   6m   7m   8    9f   10f  11i  12f  13i  14f  15hi 16hf 17hi 18hf 19hi 20hf 21hi 22hf 23h*
                ['┌', '┐', '┘', '└', '┬', '├', '│', '─', '┼', '┤', '┴', '│', '│', '─', '─', '═', '═', '╤', '╪', '╒', '╞', '╕', '╡', '╧'],  //0
                ['╔', '╗', '╝', '╚', '╦', '╠', '║', '═', '╬', '╣', '╩', '║', '║', '═', '═', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '' ],  //1
                [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '' ],  //2
                ['╓', '╖', '╜', '╙', '╥', '╟', '║', '─', '╫', '╢', '╨', '║', '║', '─', '─', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '' ],  //3
                ['╒', '╕', '╛', '╘', '╤', '╞', '│', '═', '╪', '╡', '╧', '│', '│', '═', '═', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '' ],  //4
                ['─', '─', '─', '─', '─', '─', ' ', '─', '─', '─', '─', ' ', ' ', '─', '─', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '' ],  //5
                [' ', ' ', ' ', ' ', ' ', '│', '│', ' ', '│', '│', ' ', '│', '│', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '' ],  //6
                ['/', '\\', '/', '\\', '┬', '├', '│', '─', '┼', '┤', '┴', '│', '│', '─', '─', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],//7
                ['+', '+', '+', '+', '+', '+', '|', '-', '+', '+', '+', '|', '|', '-', '-', '=', '=', '+', '+', '+', '+', '+', '+', '+'],  //8
                [' ', ' ', ' ', ' ', ' ', ' ', '│', '─', '┼', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],  //9
                ['┌', '┐', '┘', '└', '┬', '├', '│', '─', '┼', '┤', '┴', '│', '│', '─', '─', '═', '═', '╤', '╪', '╒', '╞', '╕', '╡', '╧'],  //10
                ['┌', '┐', '┘', '└', '╥', '├', '║', '─', '╫', '┤', '╨', '│', '│', '─', '─', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']   //11
            ),
            demos: [
                {
                    id: 2, name: "Demo 1", data: new Array(
                        ["IP", "Destino", "URL"],
                        ["10.82.78.26\n10.82.78.27", "API Gee Token", "https://bancoazteca.com.mx\n»https://bancoazteca.com.mx"],
                        ["10.82.78.26\nhoal", "API de Seguridad\nas", "https://bancoazteca.com.mx\nasds"],
                        ["10.82.78.26\nhoal", "API de Seguridad\nas", "https://bancoazteca.com.mx\nasds"],
                        ["10.82.78.26\nhoal", "API de Seguridad\nas", "https://bancoazteca.com.mx\nasds"]
                    )
                },
                {
                    id: 0, name: "Calendar", data: new Array(
                        ['Días de la semana', '', '', '', '', '', ''],
                        ['D', 'L', 'M', 'Mi', 'J', 'V', 'S'],
                        ['', '', '', '1', '2', '3', '4'],
                        ['5', '6', '7', '8', '9', '10', '11'],
                        ['12', '13', '14', '15', '16', '17', '18'],
                        ['19', '20', '21', '22', '23', '24', '25'],
                        ['26', '27', '28', '29', '30', '', '']
                    )
                },
                {
                    id: 1, name: "Tabla periódica", data: new Array(
                        [" ", " ", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18 "],
                        ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
                        ["1", " ", "H ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "He"],
                        ["2", " ", "Li", "Be", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "B ", "C ", "N ", "O ", "F ", "Ne"],
                        ["3", " ", "Na", "Mg", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "Al", "Si", "P ", "S ", "Cl", "Ar"],
                        ["4", " ", "K ", "Ca", "Sc", "Ti", "V ", "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn", "Ga", "Ge", "As", "Se", "Br", "Kr"],
                        ["5", " ", "Rb", "Sr", "Y ", "Zr", "Nb", "Mo", "Tc", "Ru", "Rh", "Pd", "Ag", "Cd", "In", "Sn", "Sb", "Te", "I ", "Xe"],
                        ["6", " ", "Cs", "Ba", "* ", "Hf", "Ta", "W ", "Re", "Os", "Ir", "Pt", "Au", "Hg", "Tl", "Pb", "Bi", "Po", "At", "Rn"],
                        ["7", " ", "Fr", "Ra", "**", "Rf", "Db", "Sg", "Bh", "Hs", "Mt", "Ds", "Rg", "Cn", "Nh", "Fl", "Mc", "Lv", "Ts", "Og"]
                    )
                },
                //{
                //    id: 2, name: "Demo 1", data: new Array(
                //        ["IP", "Destino", "URL"],
                //        ["10.82.78.26\n10.82.78.27", "API Gee Token", "https://bancoazteca.com.mx\n»https://bancoazteca.com.mx"],
                //        ["10.82.78.26", "API de Seguridad", "https://bancoazteca.com.mx\nURL de desarrollo"]
                //    )
                //},
                {
                    id: 3, name: "Demo 2", data: new Array(
                        ["Token", "Clave"],
                        ["APINotificaciones", "3c1a691fcba4339d61e9a93931d07353a76ba877"]
                    )
                }
            ],
            merges: {
                col:0,
                row: 3,
                colfin: 5,
                rowfin: 3
            },
            demoselected: 0,
            formatoselected: 0,
            ispadding: false,
            isheader: false,
            iscondensed: false,
        },
        computed: {
            tableList: function () {
                var res = '';
                res += '\n' + this.converttoascii(this.demos[this.demoselected].data, { format: this.formatoselected, iscondensed: this.iscondensed, ispadding: this.ispadding, isheader: this.isheader });
                return res;
            }
        },
        methods: {
            converttoascii: function (model, properties) {
                var m = model;
                var props = {
                    format: 0,
                    isheader: false,
                    iscondensed: false,
                    ispadding: false
                };
                if (properties != undefined)
                    props = {
                        format: properties.format == undefined ? 0 : properties.format,
                        isheader: properties.isheader == undefined ? false : properties.isheader,
                        iscondensed: properties.iscondensed == undefined ? false : properties.iscondensed,
                        ispadding: properties.ispadding == undefined ? false : properties.ispadding
                    };

                var f = this.formatos[props.format];
                var mw = m[0].length;
                var mh = m.length;
                var columnLength = new Array();
                var rowLength = new Array();
                var contRows = 0;
                var valpadding = (props.ispadding ? 2 : 0);

                //merges
                var merges = [
                    { id: 0, ini: [0, 3], fin: [2,3] }  ,
                    { id: 0, ini: [this.merges.col, this.merges.row], fin: [this.merges.colfin, this.merges.rowfin] }
                ];

                // cálculo de len de columnas y filas
                for (var i = 0; i < m.length; i++) {

                    var auxRowLength = 0;
                    if (rowLength[i] == undefined)
                        rowLength.push(0);

                    for (var j = 0; j < m[i].length; j++) {
                        ///--------------------------------------------
                        if (columnLength[j] == undefined)
                            columnLength.push(0);

                        var cellContent = m[i][j] + '';

                        //merges
                        var ignore_j = -1;
                        for (var a = 0; a < merges.length; a++) {
                            if (j > merges[a].ini[0] && j <= merges[a].fin[0] && i == merges[a].fin[1] && i == merges[a].ini[1]) {//se ecuentra en el eje Y, horizontal
                                ignore_j = j;
                            }
                        }
                        if (ignore_j != j) {
                            for (var z = 0; z < cellContent.split(/\r\n|\r|\n/).length; z++) {
                                if ((cellContent.split(/\r\n|\r|\n/)[z].length + valpadding) > columnLength[j])
                                    columnLength[j] = cellContent.split(/\r\n|\r|\n/)[z].length + valpadding;
                            }
                        }
                        ///--------------------------------------------

                        if (cellContent.split(/\r\n|\r|\n/).length > rowLength[i])
                            rowLength[i] = cellContent.split(/\r\n|\r|\n/).length;

                        if (cellContent.split(/\r\n|\r|\n/).length > 1 && cellContent.split(/\r\n|\r|\n/).length > auxRowLength)
                            auxRowLength = cellContent.split(/\r\n|\r|\n/).length - 1;
                    }

                    contRows += auxRowLength;
                }

                //cálculo de dimenciones de la nueva tabla resultado
                var nx = (mw == 1) ? 3 : (mw * 2 + 1);
                var ny = ((mh == 1) ? 3
                    : !props.iscondensed ?
                        (mh * 2 + 1)
                        : mh + 2 + (props.isheader? 1:0 )
                ) + contRows;

                //Inicializar matriz resultante
                var newMatrix = new Array();
                for (var i = 0; i < ny; i++) {
                    newMatrix.push(new Array(nx));
                    for (var j = 0; j < nx; j++) {
                        newMatrix[i][j] = '░';
                    }
                }

                //llenar valores iniciales ================================================================================== i => y, j => x
                var acomY = 0;
                for (var i = 0; i < m.length; i++) {
                    var y = (!props.iscondensed ? ((i + 1) * 2 - 1)
                        : i + 1)
                        + acomY;

                    if (i > 0)
                        y = y+(props.iscondensed && props.isheader ?1:0);

                    if (rowLength[i] > 1)
                        acomY += rowLength[i] - 1;

                    for (var j = 0; j < m[i].length; j++) {
                        var x = (j + 1) * 2 - 1;
                        var cellContent = m[i][j] + '';
                        var contentfirstline = props.ispadding ? ' ' + cellContent.split(/\r\n|\r|\n/)[0] + ' ' : cellContent.split(/\r\n|\r|\n/)[0] + '';
                        var spaces_aux = 0;

                        //merges
                        var ignore_j = -1;
                        var a_aux = -1;

                        var firstMerge = 0;
                        var betweenMerge = 0;
                        var lastMerge = 0;

                        for (var a = 0; a < merges.length; a++) {
                            if (j == merges[a].ini[0] && i == merges[a].fin[1] && i == merges[a].ini[1]) {
                                ignore_j = j;
                                a_aux = a;

                                firstMerge = 1;
                            }
                            if (j > merges[a].ini[0] && j <= merges[a].fin[0] && i == merges[a].fin[1] && i == merges[a].ini[1]) {
                                betweenMerge = 1;
                            }
                            if (j == merges[a].fin[0] && i == merges[a].fin[1] && i == merges[a].ini[1]) {
                                lastMerge = 1;
                            }
                        }
                        //--------------------------------------------------------------------------
                        //--------------------------------------------------------------------------
                        //--------------------------------------------------------------------------
                        if (firstMerge == 1) {
                            for (var b = merges[a_aux].ini[0]; b <= merges[a_aux].fin[0]; b++)
                                spaces_aux += columnLength[b];

                            spaces_aux += (merges[a_aux].fin[0] - merges[a_aux].ini[0]);

                            newMatrix[y][x] = contentfirstline
                                + " ".repeat(spaces_aux - contentfirstline.length);


                            for (var z = 1; z < rowLength[i]; z++) {
                                if (cellContent.split(/\r\n|\r|\n/).length > 1) {
                                    var itemline = cellContent.split(/\r\n|\r|\n/)[z] != undefined ? cellContent.split(/\r\n|\r|\n/)[z] + '' : '';

                                    if (props.ispadding)
                                        itemline = ' ' + itemline + ' ';

                                    newMatrix[y + z][x] = itemline + " ".repeat(spaces_aux - itemline.length);
                                }
                                else
                                    newMatrix[y + z][x] = " ".repeat(spaces_aux);

                                if (j == 0)
                                    newMatrix[y + z][x - 1] = f[11];//│ inicial
                                else
                                    newMatrix[y + z][x - 1] = f[6];//│ intermedio
                            }
                        }
                        else {

                            if (betweenMerge == 1) {
                                for (var z = 0; z < rowLength[i]; z++) {
                                    newMatrix[y + z][x] = "";
                                }
                            }
                            else {
                                if (lastMerge == 1) {
                                    
                                }
                                else {
                                    newMatrix[y][x] = contentfirstline.length > columnLength[j] ? contentfirstline.substr(0, columnLength[j] - 1) :
                                        contentfirstline + " ".repeat(columnLength[j] - contentfirstline.length);

                                    for (var z = 1; z < rowLength[i]; z++) {
                                        if (cellContent.split(/\r\n|\r|\n/).length > 1) {
                                            var itemline = cellContent.split(/\r\n|\r|\n/)[z] != undefined ? cellContent.split(/\r\n|\r|\n/)[z] + '' : '';

                                            if (props.ispadding)
                                                itemline = ' ' + itemline + ' ';

                                            newMatrix[y + z][x] = itemline + " ".repeat(columnLength[j] - itemline.length);
                                        }
                                        else
                                            newMatrix[y + z][x] = " ".repeat(columnLength[j]);

                                        if (j == 0)
                                            newMatrix[y + z][x - 1] = f[11];//│ inicial
                                        else
                                            newMatrix[y + z][x - 1] = f[6];//│ intermedio
                                    }
                                }
                            }
                        }

                        

                        if (i == 0) {
                            if (!props.isheader)
                                newMatrix[y - 1][x] = f[13].repeat(columnLength[j]);//─ inicial
                            else {
                                newMatrix[y - 1][x] = f[15].repeat(columnLength[j]);//─ header inicial
                                newMatrix[y + rowLength[i]][x] = f[16].repeat(columnLength[j]);//─ header final
                            }
                        }
                        else
                            if (!props.iscondensed && (!props.isheader || (props.isheader && i != 1)))
                                newMatrix[y - 1][x] = f[7].repeat(columnLength[j]);//─ intermedio

                        if (j == 0)
                            newMatrix[y][x - 1] = f[11];//│ inicial
                        else
                            newMatrix[y][x - 1] = f[6];//│ intermedio

                        if (i == 0 && j == 0)
                            if (!props.isheader)
                                newMatrix[y - 1][x - 1] = f[0];//┌
                            else {
                                newMatrix[y - 1][x - 1] = f[19];//┌

                                newMatrix[y + 1][x - 1] = f[20];//├
                            }

                        if ((i + 1) == m.length && (j + 1) == m[i].length)
                            newMatrix[y + (rowLength[i])][x + 1] = f[2];//┘

                        if ((j + 1) == m[i].length && i == 0) {
                            if (!props.isheader)
                                newMatrix[y - 1][x + 1] = f[1];//┐
                            else {
                                newMatrix[y - 1][x + 1] = f[21];//┐

                                newMatrix[y + rowLength[i]][x + 1] = f[22];//┤
                            }
                        }

                        if ((i + 1) == m.length && j == 0)
                            newMatrix[y + (rowLength[i])][x - 1] = f[3];//└

                        if (j == 0 && i > 0 && !props.iscondensed)
                            if (!props.isheader || (props.isheader && i != 1))
                                newMatrix[y - 1][x - 1] = f[5];//├

                        if (i == 0 && j > 0) {
                            if (!props.isheader)
                                newMatrix[y - 1][x - 1] = f[4];//┬
                            else {
                                newMatrix[y - 1][x - 1] = f[17];//┬

                                newMatrix[y + rowLength[i]][x - 1] = f[18];//┼

                                //merges
                                for (var a = 0; a < merges.length; a++) {
                                    if ((j > merges[a].ini[0] && j <= merges[a].fin[0] && i == merges[a].fin[1])
                                        || (i > merges[a].ini[1] && i <= merges[a].fin[1] && j == merges[a].fin[0])) {
                                        if (i == merges[a].fin[1] && i == merges[a].ini[1]) //se ecuentra en el eje Y, horizontal
                                            newMatrix[y + 1][x - 1] = f[17];//┬
                                    }
                                }
                            }
                        }

                        if (j > 0 && (i + 1) == m.length)
                            newMatrix[y + (rowLength[i])][x - 1] = f[10];//┴

                        if (i > 0 && (j + 1) == m[i].length && !props.iscondensed) {
                            if (!props.isheader || (props.isheader && i != 1))
                                newMatrix[y - 1][x + 1] = f[9];//┤
                        }

                        if (i > 0 && j > 0 && !props.iscondensed) {
                            if (!props.isheader || (props.isheader && i != 1)) {
                                newMatrix[y - 1][x - 1] = f[8];//┼

                                //merges
                                for (var a = 0; a < merges.length; a++) {
                                    if ((j > merges[a].ini[0] && j <= merges[a].fin[0] && (i - 1) == merges[a].fin[1])
                                        || (i > merges[a].ini[1] && i <= merges[a].fin[1] && (j - 1) == merges[a].fin[0])) {

                                        if ((j - 1) == merges[a].fin[0] && (j - 1) == merges[a].ini[0]) { //se ecuentra en el eje X, vertical
                                            newMatrix[y - 1][x - 1] = f[5];//├

                                            if (props.isheader && i == 1) {
                                                newMatrix[y - 1][x - 1] = f[20]; //│ inicial
                                            }
                                        }

                                        if ((i - 1) == merges[a].fin[1] && (i - 1) == merges[a].ini[1]) { //se ecuentra en el eje Y, horizontal
                                            newMatrix[y - 1][x - 1] = f[4];//┬
                                        }
                                    }
                                }
                            }
                        }

                        //merges
                        for (var a = 0; a < merges.length; a++) {
                            if ((j > merges[a].ini[0] && j <= merges[a].fin[0] && (i - 1) == merges[a].fin[1])
                                || (i > merges[a].ini[1] && i <= merges[a].fin[1] && (j - 1) == merges[a].fin[0])) {

                                if ((j - 1) == merges[a].fin[0] && (j - 1) == merges[a].ini[0]) { //se ecuentra en el eje X, vertical
                                    if (props.isheader && i == 1) {
                                        newMatrix[y - 1][x - 1] = f[20]; //│ inicial
                                    }
                                }
                            }
                        }

                        if ((j + 1) == m[i].length) {
                            for (var z = 0; z < rowLength[i]; z++)
                                newMatrix[y + z][x + 1] = f[12];//│ final
                        }

                        if ((i + 1) == m.length)
                            newMatrix[y + (rowLength[i])][x] = f[14].repeat(columnLength[j]);//─ final

                        ///Merges=========================================

                        if (i == 0 && (j+1) == m[i].length) {
                            var string = "";
                        }

                        for (var a = 0; a < merges.length; a++) {
                            if ((j > merges[a].ini[0] && j <= merges[a].fin[0] && i == merges[a].fin[1])
                                || (i > merges[a].ini[1] && i <= merges[a].fin[1] && j == merges[a].fin[0])) {

                                if (j == merges[a].fin[0] && j == merges[a].ini[0]) { //se ecuentra en el eje X, vertical
                                    for (var z = 0; z < rowLength[i]; z++)
                                        newMatrix[y + z][x] = " ".repeat(columnLength[j]);

                                    if (!props.iscondensed || (props.isheader && i == 1))
                                        newMatrix[y - 1][x] = " ".repeat(columnLength[j]);

                                    if (!props.iscondensed && i > 1) {
                                        if (j == 0)
                                            newMatrix[y - 1][x - 1] = f[11]; //│ inicial
                                        else
                                            newMatrix[y - 1][x - 1] = f[9];//┤
                                    }

                                    if (!props.iscondensed && !props.isheader && i == 1)
                                        newMatrix[y - 1][x - 1] = f[9];//┤ final

                                    if (props.isheader && i == 1) {
                                        if (j == 0)
                                            newMatrix[y - 1][x - 1] = f[11]; //│ inicial
                                        else
                                            newMatrix[y - 1][x - 1] = f[22];//┤
                                    }

                                    if (!props.isheader && i == 1 && !props.iscondensed) {
                                        if (j == 0)
                                            newMatrix[y - 1][x - 1] = f[11]; //│ inicial
                                        else
                                            newMatrix[y - 1][x - 1] = f[9];//┤
                                    }

                                    if ((j + 1) == m[i].length)
                                        newMatrix[y - 1][x + 1] = f[12];//│ final
                                }

                                if (i == merges[a].fin[1] && i == merges[a].ini[1]) { //se ecuentra en el eje Y, horizontal
                                    if (j > merges[a].ini[0]) {
                                        newMatrix[y][x] = "";

                                        for (var z = 0; z < rowLength[i]; z++) {
                                            newMatrix[y + z][x - 1] = "";
                                        }
                                    }
                                    else {
                                        newMatrix[y][x] = " ".repeat(columnLength[j]);

                                        for (var z = 0; z < rowLength[i]; z++)
                                            newMatrix[y + z][x - 1] = " ";
                                    }

                                    if (!props.iscondensed) {
                                        if (i == 0)
                                            newMatrix[y - 1][x - 1] = f[7];//─ intermedio
                                        else
                                            newMatrix[y - 1][x - 1] = f[10];//┴
                                    }

                                    if (i == 1 && props.isheader)
                                        newMatrix[y - 1][x - 1] = f[23];//╨

                                    if (props.isheader && i == 0 && j > 0)
                                        newMatrix[y - 1][x - 1] = f[15];//─ header inicial

                                    if ((i + 1) == m.length)
                                        newMatrix[y + rowLength[i]][x - 1] = f[14];//─ final
                                }
                            }
                        }
                    }
                }

                //Dibujar tabla modelo
                var res = '';

                //Dibujar tabla final
                for (var i = 0; i < newMatrix.length; i++) {
                    for (var j = 0; j < newMatrix[i].length; j++)
                        res += newMatrix[i][j] + '';
                    res += '\n';
                }

                return res;
            },
            rawpuretext: function (text) {
                return text.replace(/\xA0/g, ' ', " ").replace('<br/>', "\n");
            }
        }
    });
</script>
